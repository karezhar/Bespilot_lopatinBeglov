import os
import shutil
from PIL import Image
from tqdm import tqdm


def create_server_dataset():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è YOLO –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    """
    print("üöÄ === –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø YOLO ===")
    print("=" * 50)

    # –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    BASE_DIR = os.path.expanduser('~/Bespilot_lopatinBeglov')

    # –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
    DATA_DIR = os.path.join(BASE_DIR, 'data')
    TRAIN_IMAGES_DIR = os.path.join(DATA_DIR, 'train', 'images')
    TRAIN_LABELS_DIR = os.path.join(DATA_DIR, 'train', 'labels')
    VAL_IMAGES_DIR = os.path.join(DATA_DIR, 'val', 'images')
    VAL_LABELS_DIR = os.path.join(DATA_DIR, 'val', 'labels')

    print(f"üìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {BASE_DIR}")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {DATA_DIR}")

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
    print("\nüìÇ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...")
    with tqdm(total=4, desc="–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫", bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}") as pbar:
        os.makedirs(TRAIN_IMAGES_DIR, exist_ok=True)
        pbar.update(1)
        os.makedirs(TRAIN_LABELS_DIR, exist_ok=True)
        pbar.update(1)
        os.makedirs(VAL_IMAGES_DIR, exist_ok=True)
        pbar.update(1)
        os.makedirs(VAL_LABELS_DIR, exist_ok=True)
        pbar.update(1)

    # –ü—É—Ç–∏ –∫ –∏—Å—Ö–æ–¥–Ω—ã–º –¥–∞–Ω–Ω—ã–º (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ BASE_DIR)
    source_sequences = os.path.join(BASE_DIR, 'dataset', 'sequences')
    source_labels = os.path.join(BASE_DIR, 'dataset', 'labels')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not os.path.exists(source_sequences):
        print(f"‚ùå –û—à–∏–±–∫–∞: –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {source_sequences}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ 'dataset' —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ BASE_DIR")
        return

    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ train
    train_sequences = os.path.join(source_sequences, 'train')
    train_labels = os.path.join(source_labels, 'train')

    train_count = 0
    if os.path.exists(train_sequences):
        print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        video_folders = [f for f in os.listdir(train_sequences) if os.path.isdir(os.path.join(train_sequences, f))]

        with tqdm(total=len(video_folders), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ train",
                  bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}") as pbar:
            for video_folder in video_folders:
                video_path = os.path.join(train_sequences, video_folder)

                # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img_files = [f for f in os.listdir(video_path) if f.endswith('.jpg')]
                for img_file in img_files:
                    src_img = os.path.join(video_path, img_file)
                    dst_img = os.path.join(TRAIN_IMAGES_DIR, f"{video_folder}_{img_file}")
                    shutil.copy2(src_img, dst_img)
                    train_count += 1

                # –ö–æ–ø–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                video_label_path = os.path.join(train_labels, video_folder)
                if os.path.exists(video_label_path):
                    label_files = [f for f in os.listdir(video_label_path) if f.endswith('.txt')]
                    for label_file in label_files:
                        src_label = os.path.join(video_label_path, label_file)
                        dst_label = os.path.join(TRAIN_LABELS_DIR, f"{video_folder}_{label_file}")
                        shutil.copy2(src_label, dst_label)

                pbar.set_postfix({"images": train_count})
                pbar.update(1)

    # –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ val
    val_sequences = os.path.join(source_sequences, 'val')
    val_labels = os.path.join(source_labels, 'val')

    val_count = 0
    if os.path.exists(val_sequences):
        print(f"\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        video_folders = [f for f in os.listdir(val_sequences) if os.path.isdir(os.path.join(val_sequences, f))]

        with tqdm(total=len(video_folders), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ val",
                  bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}") as pbar:
            for video_folder in video_folders:
                video_path = os.path.join(val_sequences, video_folder)

                # –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img_files = [f for f in os.listdir(video_path) if f.endswith('.jpg')]
                for img_file in img_files:
                    src_img = os.path.join(video_path, img_file)
                    dst_img = os.path.join(VAL_IMAGES_DIR, f"{video_folder}_{img_file}")
                    shutil.copy2(src_img, dst_img)
                    val_count += 1

                # –ö–æ–ø–∏—Ä—É–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                video_label_path = os.path.join(val_labels, video_folder)
                if os.path.exists(video_label_path):
                    label_files = [f for f in os.listdir(video_label_path) if f.endswith('.txt')]
                    for label_file in label_files:
                        src_label = os.path.join(video_label_path, label_file)
                        dst_label = os.path.join(VAL_LABELS_DIR, f"{video_folder}_{label_file}")
                        shutil.copy2(src_label, dst_label)

                pbar.set_postfix({"images": val_count})
                pbar.update(1)

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {train_count} –æ–±—É—á–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {val_count} –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –≤: {DATA_DIR}")

    # –°–æ–∑–¥–∞–µ–º data.yaml –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    print(f"\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    yaml_content = f"""path: {DATA_DIR}
train: train/images
val: val/images

nc: 10
names: ["pedestrian", "person", "bicycle", "car", "van", "truck", "tricycle", "awning-tricycle", "bus", "motor"]
"""

    yaml_path = os.path.join(DATA_DIR, 'data.yaml')
    with open(yaml_path, 'w') as f:
        f.write(yaml_content)

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {yaml_path}")
    print(f"\nüéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ: python train_server.py")


if __name__ == "__main__":
    create_server_dataset()
