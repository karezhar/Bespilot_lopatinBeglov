import os
import torch
from ultralytics import YOLO
import yaml
from tqdm import tqdm
import time


def main():
    print("üöÄ === –û–ë–£–ß–ï–ù–ò–ï YOLO –ú–û–î–ï–õ–ò –ù–ê –°–ï–†–í–ï–†–ï ===")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è...")
    if torch.cuda.is_available():
        print(f"‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
        print(f"   –ü–∞–º—è—Ç—å GPU: {torch.cuda.get_device_properties(0).total_memory / 1024 ** 3:.1f} GB")
    else:
        print("‚ö†Ô∏è  CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")

    # –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    BASE_DIR = os.path.expanduser('~/Bespilot_lopatinBeglov')
    DATA_DIR = os.path.join(BASE_DIR, 'data')
    YAML_PATH = os.path.join(DATA_DIR, 'data.yaml')

    print(f"\nüìÅ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {BASE_DIR}")
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {DATA_DIR}")
    print(f"üìÑ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {YAML_PATH}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    with tqdm(total=4, desc="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤", bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}") as pbar:

        if not os.path.exists(YAML_PATH):
            print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª {YAML_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ prepare_server_dataset.py")
            return
        pbar.update(1)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º YAML –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        with open(YAML_PATH, 'r') as f:
            data_config = yaml.safe_load(f)

        train_path = os.path.join(DATA_DIR, data_config['train'])
        val_path = os.path.join(DATA_DIR, data_config['val'])

        if not os.path.exists(val_path) or len(os.listdir(val_path)) == 0:
            print("‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏")
            val_path = train_path
            val_labels_path = train_labels_path  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–µ—Ç–∫–∞–º

        if not os.path.exists(train_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {train_path}")
            return
        pbar.update(1)

        if not os.path.exists(val_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {val_path}")
            return
        pbar.update(1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        train_labels_path = os.path.join(DATA_DIR, 'train', 'labels')
        val_labels_path = os.path.join(DATA_DIR, 'val', 'labels')

        if not os.path.exists(train_labels_path):
            print(f"‚ùå –û—à–∏–±–∫–∞: –ø–∞–ø–∫–∞ —Å –æ–±—É—á–∞—é—â–∏–º–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {train_labels_path}")
            return
        pbar.update(1)

    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    print("\nüìä –ü–æ–¥—Å—á–µ—Ç –¥–∞–Ω–Ω—ã—Ö...")
    with tqdm(total=4, desc="–ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤", bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}") as pbar:

        train_images = len([f for f in os.listdir(train_path) if f.endswith('.jpg')])
        pbar.set_postfix({"train_img": train_images})
        pbar.update(1)

        val_images = len([f for f in os.listdir(val_path) if f.endswith('.jpg')])
        pbar.set_postfix({"val_img": val_images})
        pbar.update(1)

        train_labels = len([f for f in os.listdir(train_labels_path) if f.endswith('.txt')])
        pbar.set_postfix({"train_labels": train_labels})
        pbar.update(1)

        val_labels = len([f for f in os.listdir(val_labels_path) if f.endswith('.txt')])
        pbar.set_postfix({"val_labels": val_labels})
        pbar.update(1)

    print(f"üìà –ù–∞–π–¥–µ–Ω–æ {train_images} –æ–±—É—á–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ {val_images} –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ {train_labels} –æ–±—É—á–∞—é—â–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π")
    print(f"üìà –ù–∞–π–¥–µ–Ω–æ {val_labels} –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π")

    if train_images == 0:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –æ–±—É—á–∞—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ prepare_server_dataset.py")
        return

    if train_labels == 0:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –æ–±—É—á–∞—é—â–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π!")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
    print("\nü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLOv8...")
    with tqdm(total=1, desc="–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏", bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt}") as pbar:
        model = YOLO('yolov8n.pt')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
        pbar.update(1)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    results_dir = os.path.join(BASE_DIR, 'results')
    os.makedirs(results_dir, exist_ok=True)

    # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    print("\nüéØ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
    print("=" * 50)

    start_time = time.time()

    try:
        results = model.train(
            data=YAML_PATH,
            epochs=50,
            imgsz=640,
            batch=16,
            device="cuda" if torch.cuda.is_available() else "cpu",
            patience=10,  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –Ω–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π
            save=True,
            project=results_dir,
            name="yolo_training",
            verbose=True
        )

        end_time = time.time()
        training_time = end_time - start_time

        print("\n" + "=" * 50)
        print("üéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("=" * 50)
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {training_time / 3600:.2f} —á–∞—Å–æ–≤ ({training_time / 60:.1f} –º–∏–Ω—É—Ç)")
        print(f"üíæ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {results.save_dir}")

        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if hasattr(results, 'results_dict'):
            print("\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print("-" * 30)
            for key, value in results.results_dict.items():
                if isinstance(value, (int, float)):
                    if 'mAP' in key:
                        print(f"üéØ {key}: {value:.4f}")
                    elif 'precision' in key:
                        print(f"üéØ {key}: {value:.4f}")
                    elif 'recall' in key:
                        print(f"üéØ {key}: {value:.4f}")
                    else:
                        print(f"üìà {key}: {value:.4f}")

        print(f"\nüéØ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print(f"üìÅ –ü—É—Ç—å –∫ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏: {results.save_dir}/weights/best.pt")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {e}")
        return


if __name__ == "__main__":
    main()